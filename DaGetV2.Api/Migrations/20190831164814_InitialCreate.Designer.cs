// <auto-generated />
using System;
using DaGetV2.Dal.EF;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DaGetV2.Api.Migrations
{
    [DbContext(typeof(DaGetContext))]
    [Migration("20190831164814_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("daget")
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DaGetV2.Domain.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Balance")
                        .HasColumnName("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("BankAccountTypeId")
                        .HasColumnName("FK_BankAccountType")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnName("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<decimal>("OpeningBalance")
                        .HasColumnName("OpeningBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Wording")
                        .IsRequired()
                        .HasColumnName("Wording")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("BankAccountTypeId");

                    b.ToTable("BankAccount");
                });

            modelBuilder.Entity("DaGetV2.Domain.BankAccountType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Wording")
                        .IsRequired()
                        .HasColumnName("Wording")
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("BankAccountType");

                    b.HasData(
                        new
                        {
                            Id = new Guid("15f2a0f2-71f0-4823-8798-77cfa5752014"),
                            Wording = "Courant"
                        },
                        new
                        {
                            Id = new Guid("c146e49e-5884-4174-81f3-e26a5f2cf8cd"),
                            Wording = "Epargne"
                        });
                });

            modelBuilder.Entity("DaGetV2.Domain.Operation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount")
                        .HasColumnName("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("BankAccountId")
                        .HasColumnName("FK_BankAccount")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnName("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("IsClosed")
                        .HasColumnName("IsClosed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTransfert")
                        .HasColumnName("IsTransfert")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OperationDate")
                        .HasColumnName("OperationDate")
                        .HasColumnType("datetime");

                    b.Property<Guid>("OperationTypeId")
                        .HasColumnName("FK_OperationType")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("OperationTypeId");

                    b.ToTable("Operation");
                });

            modelBuilder.Entity("DaGetV2.Domain.OperationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BankAccountId")
                        .HasColumnName("FK_BankAccount")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Wording")
                        .IsRequired()
                        .HasColumnName("Wording")
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.ToTable("OperationType");
                });

            modelBuilder.Entity("DaGetV2.Domain.Transfert", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("OperationFromId")
                        .HasColumnName("FK_OperationFrom")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OperationToId")
                        .HasColumnName("FK_OperationTo")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OperationFromId");

                    b.HasIndex("OperationToId");

                    b.ToTable("Transfert");
                });

            modelBuilder.Entity("DaGetV2.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LastConnexionDate")
                        .HasColumnName("LastConnexionDate")
                        .HasColumnType("datetime");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("User");
                });

            modelBuilder.Entity("DaGetV2.Domain.UserBankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("BankAccountId")
                        .HasColumnName("FK_BankAccount")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsOwner")
                        .HasColumnName("IsOwner")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReadOnly")
                        .HasColumnName("IsReadOnly")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserId")
                        .HasColumnName("FK_User")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBankAccount");
                });

            modelBuilder.Entity("DaGetV2.Domain.BankAccount", b =>
                {
                    b.HasOne("DaGetV2.Domain.BankAccountType", "BankAccountType")
                        .WithMany("BanksAccounts")
                        .HasForeignKey("BankAccountTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DaGetV2.Domain.Operation", b =>
                {
                    b.HasOne("DaGetV2.Domain.BankAccount", "BankAccount")
                        .WithMany("Operations")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DaGetV2.Domain.OperationType", "OperationType")
                        .WithMany("Operations")
                        .HasForeignKey("OperationTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DaGetV2.Domain.OperationType", b =>
                {
                    b.HasOne("DaGetV2.Domain.BankAccount", "BankAccount")
                        .WithMany("OperationsTypes")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DaGetV2.Domain.Transfert", b =>
                {
                    b.HasOne("DaGetV2.Domain.Operation", "OperationFrom")
                        .WithMany("FromTransferts")
                        .HasForeignKey("OperationFromId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DaGetV2.Domain.Operation", "OperationTo")
                        .WithMany("ToTransferts")
                        .HasForeignKey("OperationToId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DaGetV2.Domain.UserBankAccount", b =>
                {
                    b.HasOne("DaGetV2.Domain.BankAccount", "BankAccount")
                        .WithMany("UsersBanksAccounts")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DaGetV2.Domain.User", "User")
                        .WithMany("UsersBanksAccounts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
